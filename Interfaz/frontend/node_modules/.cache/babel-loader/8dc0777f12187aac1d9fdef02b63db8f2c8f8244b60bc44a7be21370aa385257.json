{"ast":null,"code":"var _jsxFileName = \"/home/anfeng/Desktop/web-scraping/Interfaz/frontend/src/pages/TopTagsPage.tsx\",\n  _s = $RefreshSig$();\n// TopTagsPage.tsx\n\nimport React, { useState } from 'react';\nimport { getTopTagsWithMostDistinctWords, getTopTagsWithMostText, findPageByUrl } from '../api/auth';\nimport Button from '../components/Button';\nimport Input from '../components/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopTagsPage = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [pageId, setPageId] = useState(null);\n  const [distinctWordsTags, setDistinctWordsTags] = useState([]);\n  const [textCountTags, setTextCountTags] = useState([]);\n  const [error, setError] = useState('');\n  const handleFindPageId = async () => {\n    try {\n      const response = await findPageByUrl(input);\n      console.log(response.data);\n      setPageId(response.data);\n      setError('');\n    } catch (err) {\n      setError('No se pudo encontrar el ID de la página con el URL proporcionado.');\n    }\n  };\n  const handleGetTopTagsDistinctWords = async () => {\n    if (!pageId) {\n      setError('Primero busca el ID de la página o ingresa un ID válido.');\n      return;\n    }\n    try {\n      const response = await getTopTagsWithMostDistinctWords(pageId);\n      setDistinctWordsTags(response.data);\n      setError('');\n    } catch (err) {\n      setError('No se pudo obtener los tags con más palabras distintas.');\n    }\n  };\n  const handleGetTopTagsTextCount = async () => {\n    if (!pageId) {\n      setError('Primero busca el ID de la página o ingresa un ID válido.');\n      return;\n    }\n    try {\n      const response = await getTopTagsWithMostText(pageId);\n      setTextCountTags(response.data);\n      setError('');\n    } catch (err) {\n      setError('No se pudo obtener los tags con más texto.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-white bg-zinc-900 m-auto h-screen max-w-[800px]\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-5xl p-5\",\n      children: \"Top Tags\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex p-5\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Ingresa URL o ID de p\\xE1gina...\",\n        value: input,\n        onChange: e => setInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleFindPageId,\n        children: \"Buscar ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex p-5\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleGetTopTagsDistinctWords,\n        children: \"Top Tags - Palabras Distintas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleGetTopTagsTextCount,\n        children: \"Top Tags - Cantidad de Texto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-3xl\",\n        children: \"Top Tags con M\\xE1s Palabras Distintas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: distinctWordsTags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [tag.tag, \": \", tag.distinct_words_count, \" palabras distintas\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-3xl\",\n        children: \"Top Tags con M\\xE1s Texto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: textCountTags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [tag.tag, \": \", tag.text_count, \" palabras\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(TopTagsPage, \"7Dk/7kU/ge7pvLAsrhWiCzQrdig=\");\n_c = TopTagsPage;\nexport default TopTagsPage;\nvar _c;\n$RefreshReg$(_c, \"TopTagsPage\");","map":{"version":3,"names":["React","useState","getTopTagsWithMostDistinctWords","getTopTagsWithMostText","findPageByUrl","Button","Input","jsxDEV","_jsxDEV","TopTagsPage","_s","input","setInput","pageId","setPageId","distinctWordsTags","setDistinctWordsTags","textCountTags","setTextCountTags","error","setError","handleFindPageId","response","console","log","data","err","handleGetTopTagsDistinctWords","handleGetTopTagsTextCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","map","tag","index","distinct_words_count","text_count","_c","$RefreshReg$"],"sources":["/home/anfeng/Desktop/web-scraping/Interfaz/frontend/src/pages/TopTagsPage.tsx"],"sourcesContent":["// TopTagsPage.tsx\n\nimport React, { useState } from 'react';\nimport { getTopTagsWithMostDistinctWords, getTopTagsWithMostText, findPageByUrl } from '../api/auth';\nimport Button from '../components/Button';\nimport Input from '../components/Input';\n\nconst TopTagsPage: React.FC = () => {\n    const [input, setInput] = useState<string>('');\n    const [pageId, setPageId] = useState<number | null>(null);\n    const [distinctWordsTags, setDistinctWordsTags] = useState([]);\n    const [textCountTags, setTextCountTags] = useState([]);\n    const [error, setError] = useState<string>('');\n\n\n\n    const handleFindPageId = async () => {\n        try {\n            const response = await findPageByUrl(input);\n            console.log(response.data);\n            setPageId(response.data);\n            setError('');\n        } catch (err) {\n            setError('No se pudo encontrar el ID de la página con el URL proporcionado.');\n        }\n    };\n\n    const handleGetTopTagsDistinctWords = async () => {\n        if (!pageId) {\n            setError('Primero busca el ID de la página o ingresa un ID válido.');\n            return;\n        }\n        try {\n            const response = await getTopTagsWithMostDistinctWords(pageId);\n            setDistinctWordsTags(response.data);\n            setError('');\n        } catch (err) {\n            setError('No se pudo obtener los tags con más palabras distintas.');\n        }\n    };\n\n    const handleGetTopTagsTextCount = async () => {\n        if (!pageId) {\n            setError('Primero busca el ID de la página o ingresa un ID válido.');\n            return;\n        }\n        try {\n            const response = await getTopTagsWithMostText(pageId);\n            setTextCountTags(response.data);\n            setError('');\n        } catch (err) {\n            setError('No se pudo obtener los tags con más texto.');\n        }\n    };\n\n    return (\n        <div className=\"text-white bg-zinc-900 m-auto h-screen max-w-[800px]\">\n            <h1 className=\"text-5xl p-5\">Top Tags</h1>\n            <div className=\"flex p-5\">\n                <Input\n                    placeholder=\"Ingresa URL o ID de página...\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                />\n                <Button onClick={handleFindPageId}>Buscar ID</Button>\n            </div>\n\n            {error && <p className=\"text-red-500\">{error}</p>}\n\n            <div className=\"flex p-5\">\n                <Button onClick={handleGetTopTagsDistinctWords}>Top Tags - Palabras Distintas</Button>\n                <Button onClick={handleGetTopTagsTextCount}>Top Tags - Cantidad de Texto</Button>\n            </div>\n\n            <div className=\"p-5\">\n                <h2 className=\"text-3xl\">Top Tags con Más Palabras Distintas</h2>\n                <ul>\n                    {distinctWordsTags.map((tag: any, index: number) => (\n                        <li key={index}>\n                            {tag.tag}: {tag.distinct_words_count} palabras distintas\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n            <div className=\"p-5\">\n                <h2 className=\"text-3xl\">Top Tags con Más Texto</h2>\n                <ul>\n                    {textCountTags.map((tag: any, index: number) => (\n                        <li key={index}>\n                            {tag.tag}: {tag.text_count} palabras\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default TopTagsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}